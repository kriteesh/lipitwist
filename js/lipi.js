let hkToDev = (arr) => arr 
.replace(/kh/g, "ख्")
.replace(/k/g, "क्") 
.replace(/gh/g, "घ्") 
.replace(/g/g, "ग्") 
.replace(/G/g, "ङ्")
.replace(/ch/g, "छ्") 
.replace(/c/g, "च्") 
.replace(/jh/g, "झ्") 
.replace(/j/g, "ज्")  
.replace(/J/g, "ञ्") 
.replace(/Th/g, "ठ्")
.replace(/T/g, "ट्") 
.replace(/Dh/g, "ढ्")  
.replace(/D/g, "ड्") 
.replace(/N/g, "ण्") 
.replace(/th/g, "थ्") 
.replace(/t/g, "त्") 
.replace(/dh/g, "ध्")
.replace(/d/g, "द्")  
.replace(/n/g, "न्") 
.replace(/ph/g, "फ्") 
.replace(/p/g, "प्") 
.replace(/bh/g, "भ्")
.replace(/b/g, "ब्")  
.replace(/m/g, "म्") 
.replace(/y/g, "य्") 
.replace(/r/g, "र्") 
.replace(/l/g, "ल्") 
.replace(/v/g, "व्") 
.replace(/z/g, "श्") 
.replace(/S/g, "ष्") 
.replace(/s/g, "स्") 
.replace(/aM/g, "अं") 
.replace(/aH/g, "अः")
.replace(/ai/g, "ऐ") 
.replace(/au/g, "औ")
.replace(/a/g, "अ") 
.replace(/A/g, "आ") 
.replace(/i/g, "इ") 
.replace(/I/g, "ई") 
.replace(/u/g, "उ") 
.replace(/U/g, "ऊ") 
.replace(/e/g, "ए") 
.replace(/o/g, "ओ")  
.replace(/lRR/g, "ॡ") 
.replace(/RR/g, "ॠ") 
.replace(/lR/g, "ऌ")
.replace(/R/g, "ऋ") 
.replace(/h/g, "ह्")
.replace(/H/g, "ः")
.replace(/M/g, "ं")
.replace(/्अ/g,"")
.replace(/्आ/g,"ा")
.replace(/्इ/g,"ि")
.replace(/्ई/g,"ी")
.replace(/्उ/g,"ु")
.replace(/्ऊ/g,"ू")
.replace(/्ए/g,"े")
.replace(/्ऐ/g,"ै")
.replace(/्ओ/g,"ो")
.replace(/्औ/g,"ौ")
.replace(/्ऋ/g,"ृ")
.replace(/्ॠ/g,"ॄ")
.replace(/्ऌ/g,"ॢ")
.replace(/्ॡ/g,"ॣ")
.replace(/्अं/g,"ं")
.replace(/्अः/g,"ः");

let hkToIast = (arr) => arr 
.replace(/G/g, "ṅ")  
.replace(/J/g, "ñ") 
.replace(/Th/g, "ṭh")
.replace(/T/g, "ṭ") 
.replace(/Dh/g, "ḍh")  
.replace(/D/g, "ḍ") 
.replace(/N/g, "ṇ")  
.replace(/z/g, "ś")
.replace(/S/g, "ṣ") 
.replace(/aM/g, "aṃ") 
.replace(/aH/g, "aḥ")
.replace(/A/g, "ā") 
.replace(/I/g, "ī") 
.replace(/U/g, "ū")  
.replace(/lRR/g, "ḹ") 
.replace(/RR/g, "ṝ") 
.replace(/lR/g, "ḷ")
.replace(/R/g, "ṛ") 
.replace(/H/g, "ḥ")
.replace(/M/g, "ṃ");

let devToLang = (arr) => lang => arr
.replace(/ँ/g,lang[0])
.replace(/ं/g,lang[1])
.replace(/ः/g,lang[2])
.replace(/अ/g,lang[3])
.replace(/आ/g,lang[4])
.replace(/इ/g,lang[5])
.replace(/ई/g,lang[6])
.replace(/उ/g,lang[7])
.replace(/ऊ/g,lang[8])
.replace(/ऋ/g,lang[9])
.replace(/ॠ/g,lang[10])
.replace(/ऌ/g,lang[11])
.replace(/ॡ/g,lang[12])
.replace(/ए/g,lang[13])
.replace(/ऐ/g,lang[14])
.replace(/ओ/g,lang[15])
.replace(/औ/g,lang[16])
.replace(/क/g,lang[17])
.replace(/ख/g,lang[18])
.replace(/ग/g,lang[19])
.replace(/घ/g,lang[20])
.replace(/ङ/g,lang[21])
.replace(/च/g,lang[22])
.replace(/छ/g,lang[23])
.replace(/ज/g,lang[24])
.replace(/झ/g,lang[25])
.replace(/ञ/g,lang[26])
.replace(/ट/g,lang[27])
.replace(/ठ/g,lang[28])
.replace(/ड/g,lang[29])
.replace(/ढ/g,lang[30])
.replace(/ण/g,lang[31])
.replace(/त/g,lang[32])
.replace(/थ/g,lang[33])
.replace(/द/g,lang[34])
.replace(/ध/g,lang[35])
.replace(/न/g,lang[36])
.replace(/प/g,lang[37])
.replace(/फ/g,lang[38])
.replace(/ब/g,lang[39])
.replace(/भ/g,lang[40])
.replace(/म/g,lang[41])
.replace(/य/g,lang[42])
.replace(/र/g,lang[43])
.replace(/ल/g,lang[44])
.replace(/व/g,lang[45])
.replace(/श/g,lang[46])
.replace(/ष/g,lang[47])
.replace(/स/g,lang[48])
.replace(/ह/g,lang[49])
.replace(/ळ/g,lang[50])
.replace(/ा/g,lang[51])
.replace(/ि/g,lang[52])
.replace(/ी/g,lang[53])
.replace(/ु/g,lang[54])
.replace(/ू/g,lang[55])
.replace(/ृ/g,lang[56])
.replace(/ॄ/g,lang[57])
.replace(/ॢ/g,lang[58])
.replace(/ॣ/g,lang[59])
.replace(/े/g,lang[60])
.replace(/ै/g,lang[61])
.replace(/ो/g,lang[62])
.replace(/ौ/g,lang[63])
.replace(/्/g,lang[64])
.replace(/।/g,lang[65])
.replace(/॥/g,lang[66])
.replace(/०/g,lang[67])
.replace(/१/g,lang[68])
.replace(/२/g,lang[69])
.replace(/३/g,lang[70])
.replace(/४/g,lang[71])
.replace(/५/g,lang[72])
.replace(/६/g,lang[73])
.replace(/७/g,lang[74])
.replace(/८/g,lang[75])
.replace(/९/g,lang[76]);

let twoStep =  (num) => {
    if(num==0) return 'शून्य';
    let arm = [" "," एकः"," द्वौ"," त्रयः"," चत्वारः"," पञ्च"," षट्"," सप्त"," अष्ट"," नव"," दश"," एकादश"," द्वादश"," त्रयोदश"," चतुर्दश"," पञ्चदश"," षोडश"," सप्तदश"," अष्टादश"," एकोनविंशतिः", " विंशतिः", " एकविंशतिः", " द्वाविंशतिः", " त्रयोविंशतिः", " चतुर्विंशतिः", " पञ्चविंशतिः", " षड्विंशतिः", " सप्तविंशतिः", " अष्टविंशतिः", " एकोनत्रिंशत्", " त्रिंशत्", " एकत्रिंशत्", " द्वात्रिंशत्", " त्रयस्त्रिंशत्", " चतुर्त्रिंशत्", " पञ्चत्रिंशत्", " षट्त्रिंशत्", " सप्तत्रिंशत्", " अष्टात्रिंशत्", " एकोनचत्वारिंशत्", " चत्वारिंशत्", " एकचत्वारिंशत्", " द्वाचत्वारिंशत्", " त्रिचत्वारिंशत्", " चतुश्चत्वारिंशत्", " पंचचत्वारिंशत्", " षट्चत्वारिंशत्", " सप्तचत्वारिंशत्", " अष्टचत्वारिंशत्", " एकोनपञ्चाशत्", " पञ्चाशत्", " एकपञ्चाशत्", " द्वापञ्चाशत्", " त्रिपञ्चाशत्", " चतुःपञ्चाशत्", " पञ्चपञ्चाशत्", " षट्पञ्चाशत्", " सप्तपञ्चाशत्", " अष्टपञ्चाशत्", " एकोनषष्टिः", " षष्टिः", " एकषष्टिः", " द्विषष्टिः", " त्रिषष्टिः", " चतुःषष्टिः", " पंचषष्टिः", " षट्षष्टिः", " सप्तषष्टिः", " अष्टषष्टिः", " एकोनसप्ततिः", " सप्ततिः", " एकसप्ततिः", " द्विसप्ततिः", " त्रिसप्ततिः", " चतुःसप्ततिः", " पंचसप्ततिः", " षट्सप्ततिः", " सप्तसप्ततिः", " अष्टसप्ततिः", " एकोनाशीतिः", " अशीतिः", " एकाशीतिः", " द्वाशीतिः", " त्रयाशीतिः", " चतुराशीतिः", " पंचाशीतिः", " षडशीतिः", " सप्ताशीतिः", " अष्टाशीतिः", " एकोननवतिः", " नवतिः", " एकनवतिः", " द्वानवतिः", " त्रिनवतिः", " चतुर्नवतिः", " पंचनवतिः", " षण्णवतिः", " सप्तनवतिः", " अष्टनवतिः", " नवनवतिः" ];
    let bet = ["",""," विंशति"," त्रिंशत्"," चत्वारिंशत्"," पञ्चाशत्"," षष्ठिः"," सप्ततिः"," अशीतिः"," नवतिः"];  
    if ((num = num.toString()).length > 19) return 'असंख्य';
    n = ('0000000000000000000' + num).substr(-19).match(/^(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{1})(\d{2})$/);
    if (!n) return; var str = '';
    str += (n[1] != 0) ? (arm[Number(n[1])] || bet[n[1][0]] + ' ' + arm[n[1][1]]) + ' शङ्खः' : '' ;
    str += (n[2] != 0) ? (arm[Number(n[2])] || bet[n[2][0]] + ' ' + arm[n[2][1]]) + ' नीलः' : '' ;
    str += (n[3] != 0) ? (arm[Number(n[3])] || bet[n[3][0]] + ' ' + arm[n[3][1]]) + ' पद्म:' : '' ;
    str += (n[4] != 0) ? (arm[Number(n[4])] || bet[n[4][0]] + ' ' + arm[n[4][1]]) + ' खर्व:' : '' ;
    str += (n[5] != 0) ? (arm[Number(n[5])] || bet[n[5][0]] + ' ' + arm[n[5][1]]) + ' अर्बुदम्' : '' ;
    str += (n[6] != 0) ? (arm[Number(n[6])] || bet[n[6][0]] + ' ' + arm[n[6][1]]) + ' कोटि:' : '' ;
    str += (n[7] != 0) ? (arm[Number(n[7])] || bet[n[7][0]] + ' ' + arm[n[7][1]]) + ' लक्षम्' : '' ;
    str += (n[8] != 0) ? (arm[Number(n[8])] || bet[n[8][0]] + ' ' + arm[n[8][1]]) + ' सहस्रम्' : '' ;
    str += (n[9] != 0) ? (arm[Number(n[9])] || bet[n[9][0]] + ' ' + arm[n[9][1]]) + ' शतम्' : '';
    str += (n[10] != 0) ? ((str != '') ? ' च' : '') + (arm[Number(n[10])] || bet[n[10][0]] + ' ' + arm[n[10][1]]) + ' एव' : '';
    return str;
}
